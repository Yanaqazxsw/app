import React, { useState, useEffect } from 'react';
import { getPosts, toggleLike, toggleDislike, deletePost, updatePost } from './BlogAxios';
import Modal from './Modal';
import EditPostModal from './EditPostModal';
import './PostList.css';

const categoryNames = {
  lifestyle: "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
  tech: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
  science: "–ù–∞—É–∫–∞",
  fashion: "–ú–æ–¥–∞",
  food: "–ï–¥–∞",
};

const PostList = ({ posts, setPosts }) => {
  const [userReactions, setUserReactions] = useState({});
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [sortOrder, setSortOrder] = useState('title');
  const [category, setCategory] = useState('');
  const [selectedPost, setSelectedPost] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const token = localStorage.getItem('access_token');
  const userId = localStorage.getItem('user_id');

  const fetchPosts = async (page, sortOrder, category) => {
    setLoading(true);
    const response = await getPosts(page, sortOrder, category);
    if (response && setPosts) {
      setPosts(response.results);
      setTotalPages(Math.ceil(response.count / 5));
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchPosts(currentPage, sortOrder, category);
  }, [currentPage, sortOrder, category]);

  const handlePageChange = (page) => setCurrentPage(page);
  const handleSortChange = (event) => { setSortOrder(event.target.value); setCurrentPage(1); };
  const handleCategoryChange = (event) => { setCategory(event.target.value); setCurrentPage(1); };

  const handleToggleLike = async (postId) => {
    if (userReactions[postId]?.like) return;
    const updatedPost = await toggleLike(postId);
    if (updatedPost && setPosts) {
      setPosts(posts.map(post =>
        post.id === postId ? { ...post, likes: updatedPost.likes } : post
      ));
      setUserReactions({
        ...userReactions,
        [postId]: { ...userReactions[postId], like: true },
      });
    }
  };

  const handleToggleDislike = async (postId) => {
    if (userReactions[postId]?.dislike) return;
    const updatedPost = await toggleDislike(postId);
    if (updatedPost && setPosts) {
      setPosts(posts.map(post =>
        post.id === postId ? { ...post, dislikes: updatedPost.dislikes } : post
      ));
      setUserReactions({
        ...userReactions,
        [postId]: { ...userReactions[postId], dislike: true },
      });
    }
  };

  const handleDeletePost = async (postId) => {
    const response = await deletePost(postId);
    if (response.success && setPosts) {
      setPosts(posts.filter(post => post.id !== postId));
      alert("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω");
    } else {
      alert(response.message || "–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç");
    }
  };

  const handleOpenModal = async (postId) => {
    const response = await fetch(`http://localhost:8000/api/posts/${postId}/`);
    const post = await response.json();
    setSelectedPost(post);
    setIsEditing(false);
  };

  const handleCloseModal = () => { setSelectedPost(null); setIsEditing(false); };
  const handleEditPost = (post) => { setIsEditing(true); setSelectedPost(post); };

  const handleSavePost = async (updatedPost) => {
    const response = await updatePost(updatedPost.id, updatedPost);
    if (response && setPosts) {
      setPosts(posts.map(post =>
        post.id === updatedPost.id ? updatedPost : post
      ));
      setSelectedPost(updatedPost);
      setIsEditing(false);
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...</div>;

  return (
    <div className="post-list">
      <h2>–ü–æ—Å—Ç—ã –±–ª–æ–≥–∞</h2>

      <select onChange={handleCategoryChange} value={category}>
        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
        <option value="lifestyle">–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏</option>
        <option value="tech">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>
        <option value="science">–ù–∞—É–∫–∞</option>
        <option value="fashion">–ú–æ–¥–∞</option>
        <option value="food">–ï–¥–∞</option>
      </select>

      <select onChange={handleSortChange} value={sortOrder}>
        <option value="title">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)</option>
        <option value="-title">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)</option>
      </select>

      {posts.length > 0 ? (
        <ul style={{ listStyle: 'none', margin: 0, padding: 0 }}>
          {posts.map(post => (
            <li key={post.id} style={{ marginBottom: '1rem' }}>
              <h3>{post.title}</h3>
              <p>{post.description}</p>
              <small>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {categoryNames[post.category] || post.category}</small>
              <div>
                <button onClick={() => handleToggleLike(post.id)} disabled={userReactions[post.id]?.like}>üëç {post.likes}</button>
                <button onClick={() => handleToggleDislike(post.id)} disabled={userReactions[post.id]?.dislike}>üëé {post.dislikes}</button>
                <button onClick={() => handleOpenModal(post.id)}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
                <button onClick={() => handleEditPost(post)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onClick={() => handleDeletePost(post.id)}>–£–¥–∞–ª–∏—Ç—å</button>
              </div>
            </li>
          ))}
        </ul>
      ) : <p>–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>}

      <div>
        {Array.from({ length: totalPages }, (_, index) => (
          <button key={index} onClick={() => handlePageChange(index + 1)} disabled={index + 1 === currentPage}>
            {index + 1}
          </button>
        ))}
      </div>

      {/* ======== –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ ======== */}
      {selectedPost && !isEditing && (
        <Modal
          post={selectedPost}
          onClose={handleCloseModal}
          isAuthenticated={!!token}
          currentUser={{ id: parseInt(userId) }}
        />
      )}

      {isEditing && selectedPost && (
        <EditPostModal
          post={selectedPost}
          onClose={handleCloseModal}
          onPostUpdated={handleSavePost}
        />
      )}
    </div>
  );
};

export default PostList;